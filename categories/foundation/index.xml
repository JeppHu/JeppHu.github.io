<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Foundation on Jepp Hu</title>
    <link>https://jepphu.github.io/categories/foundation/</link>
    <description>Recent content in Foundation on Jepp Hu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jepphu.github.io/categories/foundation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NSRunLoop</title>
      <link>https://jepphu.github.io/2018/nsrunloop/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/nsrunloop/</guid>
      <description>NSRunLoop：消息循环机制 线程与 RunLoop 是一一对应的
有线程，才能开启线程中对应 RunLoop
主线程的 RunLoop 是默认开启的，而子线程中的 RunLoop 是默认关闭的
开启了 RunLoop 的线程才不会在执行完队列任务被回收
所以主线程可以一直运行而不会结束
NSRunLoop 保证线程不会被退出，并且能在不处理消息的时候让线程休眠，节约资源，在接收到消息的时候唤醒线程做出对应处理并接收各种消息和处理各种事件
获取 RunLoop 苹果不直接创建 RunLoop，只能获取
RunLoop 是懒加载，在第一次获取时创建，在线程结束时销毁
// 获取当前线程的RunLoop [NSRunLoop currentRunLoop]; [NSRunLoop mainRunLoop]; CFRunLoopGetMain(); CFRunLoopGetCurrent();  启动 RunLoop // 默认 NSDefaultRunLoopMode [[NSRunLoop currentRunLoop] run]; // 默认 NSDefaultRunLoopMode，消息循环一直运行, 2秒后结束 [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:2]]; // 指定运行模式，在时间到后或者触发了非 Timer 的事件后退出。 [[NSRunLoop currentRunLoop] runMode:NSRunLoopCommonModes beforeDate:[NSDate dateWithTimeIntervalSinceNow:2]];  启动 RunLoop 时必须指定一种 mode
NSDefaultRunLoopMode // 默认模式, 可以处理输入源 UITrackingRunloopMode // 界面跟踪模式，用于 scrollView, textView 追踪触摸，界面滑动时不受其他 mode 影响 UIinitializationRunloopMode // 在 App 启动进入被主线程使用的第一个 mode，启动完成后就不再使用 GSEventRecieveRunloopMode // 苹果使用绘图相关 NSRunLoopCommonModes // 混合模式, 是一个集合, 包含了NSDefaultRunLoopMode, UITrackingRunLoopMode等  mode 有三个组成部分 Source（事件源），Timer（定时器）以及 Observor（观察者）</description>
    </item>
    
    <item>
      <title>GCD</title>
      <link>https://jepphu.github.io/2018/gcd/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/gcd/</guid>
      <description>GCD : Grand Central Dispatch  任务: block，确认执行什么任务
 队列: queue，用来存放任务，并行或串行
 执行方式：同步，不开线程；异步，开启线程
   创建队列 创建任务 将任务添加到队列并执行  // 创建队列 (全局队列，实际上是获取到全局队列) dispatch_queue_t queue = dispatch_get_global_queue(0, 0); // 创建任务 dispatch_block_t task = ^{ NSLog(@&amp;quot;%@&amp;quot;, [NSThread currentThread]); }; // 将任务添加到队列并执行 // 异步执行, 开启了新的线程 dispatch_async(queue, task); // 同步执行, 仍然在当前线程上(不一定是主线程)执行任务, 不会开新的线程 dispatch_sync(queue, task);  队列  并行队列：只在异步执行有效，自动开启多个线程同时执行任务
 串行队列：让任务一个接一个的执行，只会在一个线程中执行完队列中的任务
 主队列：主线程中的队列
 全局队列：本质是并行队列，只是全局队列没有名称，没办法跟踪错误，并行队列则有名称；全局队列一直存在, 不用自己创建, 只需要获取;
  dispatch_get_global_queue(&amp;lt;#long identifier#&amp;gt;, &amp;lt;#unsigned long flags#&amp;gt;) &amp;lt;#long identifier#&amp;gt; : 服务质量, 也就是并发优先级，0 &amp;lt;#unsigned long flags#&amp;gt; : 这个参数没有作用, 苹果留用, 固定为 0  多线程通常使用 全局队列</description>
    </item>
    
    <item>
      <title>GCD Time</title>
      <link>https://jepphu.github.io/2018/gcd_time/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/gcd_time/</guid>
      <description> 延迟执行 // 参数1: 延迟多少时间, 精度到 纳秒 // 参数2: 队列 // 参数3: 任务 double second = 3.0; dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(second * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{ NSLog(@&amp;quot;延迟 %f&amp;quot;, second); });  定时器 dispatch_source </description>
    </item>
    
    <item>
      <title>GCD barrier 阻塞与调度组</title>
      <link>https://jepphu.github.io/2018/gcd_barrier%E9%98%BB%E5%A1%9E/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/gcd_barrier%E9%98%BB%E5%A1%9E/</guid>
      <description>需求：开启 N 个子线程执行任务，但是后面需要依赖 N 个子线程的任务结果才能继续操作
可以使用 barrier 或 调度组
barrier 主要用于在多个异步操作完成之后，统一对非线程安全的对象进行更新，适合于大规模的 I/O 操作
当访问数据库或文件时，更新数据的时候不能和其他更新和读取的操作在同一时间执行
@interface ViewController () { dispatch_queue_t _queue; } @property (strong, nonatomic) NSMutableArray *photoList; @end - (NSMutableArray *)photoList { if (!_photoList) { _photoList = [NSMutableArray array]; } return _photoList; } - (void)viewDidLoad { [super viewDidLoad]; // 创建并发队列，不能使用全局队列, 要用手动创建并发队列 _queue = dispatch_queue_create(&amp;quot;for barrier&amp;quot;, DISPATCH_QUEUE_CONCURRENT); for (int i = 0; i &amp;lt; 10; i ++) { [self getImage:i]; } } - (void)getImage:(int)index { // 异步执行并发队列，创建多个子线程执行任务 queue = dispatch_queue_create(&amp;quot;for barrier&amp;quot;, DISPATCH_QUEUE_CONCURRENT); dispatch_async(_queue, ^{ NSString *fileName = [NSString stringWithFormat:@&amp;quot;%02d&amp;quot;, index % 10]; NSString *path = [[NSBundle mainBundle] pathForResource:fileName ofType:@&amp;quot;png&amp;quot;]; UIImage *image = [UIImage imageWithContentsOfFile:path]; // 多线程，同一时刻向 photoList 添加元素，可能会造成丢失，崩溃，这个时候需要添加阻塞，且不能使用全局队列, 要用手动创建并发队列 // 阻塞所有的线程, 直到队列任务都完成后才执行这个段代码, 最后才来添加 dispatch_barrier_async(self-&amp;gt;_queue, ^{ [self.</description>
    </item>
    
    <item>
      <title>GCD 单例</title>
      <link>https://jepphu.github.io/2018/gcd%E5%8D%95%E4%BE%8B/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/gcd%E5%8D%95%E4%BE%8B/</guid>
      <description>dispach_once dispach_once 函数中的代码块只会被执行一次，而且还是线程安全的
@interface Person : NSObject + (instancetype)sharePerson; @end  @implementation Person + (instancetype)allocWithZone:(struct _NSZone *)zone { static Person *instance = nil; // 一次性执行 static dispatch_once_t onceToken; dispatch_once(&amp;amp;onceToken, ^{ instance = [super allocWithZone:zone]; }); return instance; } + (instancetype)sharePerson { return [self new]; }  快速实现单例 封装到头文件
// 创建单例, 禁用 alloc, new, copy, mutableCopy 方法 #define SINGLETON_DEF(_type_) + (_type_ *)sharedInstance;\ +(instancetype) alloc __attribute__((unavailable(&amp;quot;call sharedInstance instead&amp;quot;)));\ +(instancetype) new __attribute__((unavailable(&amp;quot;call sharedInstance instead&amp;quot;)));\ -(instancetype) copy __attribute__((unavailable(&amp;quot;call sharedInstance instead&amp;quot;)));\ -(instancetype) mutableCopy __attribute__((unavailable(&amp;quot;call sharedInstance instead&amp;quot;)));\ // 实现单例 #define SINGLETON_IMP(_type_) + (_type_ *)sharedInstance {\ static _type_ *sharedInstance = nil;\ static dispatch_once_t onceToken;\ dispatch_once(&amp;amp;onceToken, ^{\ sharedInstance = [[super alloc] init];\ });\ return sharedInstance;\ }  声明</description>
    </item>
    
    <item>
      <title>NSThread</title>
      <link>https://jepphu.github.io/2018/nsthread/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/nsthread/</guid>
      <description> 多线程 多线程是切换执行的, 切换的速度非常快, 接近于 &amp;ldquo;同时&amp;rdquo; 执行, 实际上每个线程执行一段时间片就切换
程序执行过程中系统会生成一些辅助线程, 且会自动销毁
NSThread 生命周期需要程序员管理
NSThread 的使用方式 方式 1
// NSThread *thread1 = [[NSThread alloc] initWithTarget:self selector:@selector(demo:) object:@&amp;quot;obj&amp;quot;]; // 线程名字 thread1.name = @&amp;quot;t1&amp;quot;; // 线程的优先级,默认 0.5, 取值范围 (0 ~ 1), 可以使被分配时间片的几率更大, 但是不能保证一定先执行完 thread1.threadPriority = 1; // 线程进入可执行状态, 等待被调度, 执行 [thread1 start];  方式 2
[NSThread detachNewThreadSelector:@selector(demo) toTarget:self withObject:nil];  方式 3
[self performSelectorInBackground:@selector(demo) withObject:nil];  调用方法
- (void)demo:(NSString *)sender { NSLog(@&amp;quot;name : %@&amp;quot;, name); for (int i = 0; i &amp;lt; 20; i ++) { NSLog(@&amp;quot;%@&amp;quot;, [NSThread currentThread]); // 阻塞线程 [NSThread sleepForTimeInterval:1]; } [NSThread exit]; }  </description>
    </item>
    
    <item>
      <title>多线程与锁</title>
      <link>https://jepphu.github.io/2018/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%94%81/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%94%81/</guid>
      <description>atomic 原子属性 多个线程同时读写这个属性时, 上了一把自旋锁,
 自旋锁: 单写多读, 单个线程写入, 但是允许多个线程读取
所以这样多线程读仍然会导致数据错误
如果线程正在锁定代码, 其他线程的写入操作会用死循环的方式一直等待锁定的代码执行完毕, 自旋锁更适合执行不耗时的代码
 互斥锁
想读写完全绑定, 只能用互斥锁
如果线程正在锁定代码, 其他线程的会进入就绪状态(休眠,等待执行), 等到锁打开后, 线程被唤醒
  nonatomic 非原子属性 没有锁, 但是性能高
@property (assign, nonatomic) int ticketsCount;  上互斥锁
// 模拟多窗口卖票的操作 self.ticketsCount = 10; //多线程执行卖票操作, 这样会造成数据错误, 需要将单个线程读写操作绑定在一起, 使两者不能不可分割(原子性), [NSThread detachNewThreadSelector:@selector(sellTickets) toTarget:self withObject:nil]; [NSThread detachNewThreadSelector:@selector(sellTickets) toTarget:self withObject:nil];  - (void)sellTickets { while (YES) { // 模拟耗时操作 [NSThread sleepForTimeInterval:1.0]; //上互斥锁, 将单个线程读写操作绑定在一起, 使两者不能不可分割(原子性) //实现线程同步, 让线程在这里按顺序执行(会影响程序性能) //锁是 NSObject 的一个对象, 默认打开, 进入代码块将上锁 @synchronized(self) { if (self.</description>
    </item>
    
    <item>
      <title>归档存储对象</title>
      <link>https://jepphu.github.io/2017/%E5%BD%92%E6%A1%A3%E5%AD%98%E5%82%A8%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2017/%E5%BD%92%E6%A1%A3%E5%AD%98%E5%82%A8%E5%AF%B9%E8%B1%A1/</guid>
      <description>NSCoder 编码解码 让对象需要存储的类遵守  协议，然后在它的 .m 文件中实现协议方法，将属性编码解码  实现编码协议方法，将属性编码
 不是对象的属性通过 NSNumber 类转换为对象
 每一个对象分别提供一个唯一的字符串即键，一一进行编码
  - (void)encodeWithCoder:(NSCoder *)aCoder { [aCoder encodeObject:self.subject forKey:KEY_SUBJECT]; [aCoder encodeObject:self.fro forKey:KEY_FROM]; [aCoder encodeObject:[NSNumber numberWithBool:self.isFavorite] forKey:KEY_FAVORITE]; }   实现解码协议方法，将属性解码
 根据自己添加的键返回对象
 把这些对象和提取出来的数据一一赋给对应的属性
  - (instancetype)initWithCoder:(NSCoder *)aDecoder { self = [self init]; if (self) { self.subject = [aDecoder decodeObjectForKey:KEY_SUBJECT]; self.fro = [aDecoder decodeObjectForKey:KEY_FROM]; self.isFavorite = [[aDecoder decodeObjectForKey:KEY_FAVORITE] boolValue]; } return self; }  对象写入/读取 把对象写进指定的文件，写入成功则返回 YES，否则返回 NO</description>
    </item>
    
    <item>
      <title>NSBundle</title>
      <link>https://jepphu.github.io/2017/nsbundle/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2017/nsbundle/</guid>
      <description> 获取资源文件 NSString *bundlePath = [[NSBundle mainBundle] resourcePath]; NSString *imagePath = [[NSBundle mainBundle] pathForResource:@&amp;quot;imageName&amp;quot; ofType:@&amp;quot;png&amp;quot;];  从文件中读取数据 NSString *path = [[NSBundle mainBundle] pathForResource:@&amp;quot;MKStoreKitConfigs&amp;quot; ofType:@&amp;quot;plist&amp;quot;]; NSDictionary *dic = [[[NSDictionary alloc] initWithContentsOfFile:path]];  </description>
    </item>
    
  </channel>
</rss>