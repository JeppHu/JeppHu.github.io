<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UIKit on Jepp Hu</title>
    <link>https://jepphu.github.io/categories/uikit/</link>
    <description>Recent content in UIKit on Jepp Hu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Mar 2019 15:56:28 +0800</lastBuildDate>
    
	<atom:link href="https://jepphu.github.io/categories/uikit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>不使用 storyBoard</title>
      <link>https://jepphu.github.io/2019/%E4%B8%8D%E4%BD%BF%E7%94%A8storyboard/</link>
      <pubDate>Fri, 15 Mar 2019 15:56:28 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/%E4%B8%8D%E4%BD%BF%E7%94%A8storyboard/</guid>
      <description>纯代码的方式开始搭建界面 - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds]; UIViewController *redView = [[UIViewController alloc] init]; redView.view.backgroundColor = [UIColor redColor]; //1. 直接以 UIViewController 作为 window 的根控制器 // self.window.rootViewController = redView; // [self.window makeKeyAndVisible]; //2. 以 UINavigationController 作为 window 的根控制器(44px) // UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:redView]; // nav.view.backgroundColor = [UIColor grayColor]; // self.window.rootViewController = nav; // [self.window makeKeyAndVisible]; //3. 以 UITabBarController 作为 window 的根控制器 UITabBarController *tabBarController = [[UITabBarController alloc] init]; UIViewController *v1 = [[UIViewController alloc] init]; v1.</description>
    </item>
    
    <item>
      <title>UIGestureRecognizer</title>
      <link>https://jepphu.github.io/2019/uigesturerecognizer/</link>
      <pubDate>Fri, 15 Mar 2019 15:45:29 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/uigesturerecognizer/</guid>
      <description>点击 // 创建点击手势对象 UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tap:)]; // 几个手指 tap.numberOfTouchesRequired = 2; // 点击几次 tap.numberOfTapsRequired = 2; // 给 View 添加一个手势 [self.imageView addGestureRecognizer:tap];  长按 UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPress:)]; // 长按时间 longPress.minimumPressDuration = 0.5; // 在长按时移动允许的误差范围, 超过范围 误差失效 longPress.allowableMovement = 50; [self.imageView addGestureRecognizer:longPress];  - (void)longPress:(UILongPressGestureRecognizer *)sender { // 默认长按移动时会一直执行, 放开时也会执行, 加个判断, 只执行一次 if (sender.state == UIGestureRecognizerStateBegan) { NSLog(@&amp;quot;%s&amp;quot;, __FUNCTION__); } }  清扫 UISwipeGestureRecognizer *swipe = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipe:)]; // 控制识别的手势方向, 默认识别从左往右, 此处改为从右往左 swipe.</description>
    </item>
    
    <item>
      <title>UIImageView 的 contentMode 属性</title>
      <link>https://jepphu.github.io/2019/uiimageview/</link>
      <pubDate>Tue, 05 Mar 2019 20:11:26 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/uiimageview/</guid>
      <description> contentMode UIViewContentModeScaleToFill, // 默认，对图片进行拉伸处理，不按比例充满 bounds UIViewContentModeScaleAspectFit, // 按原图比例进行拉伸，图片完全展示在 bounds 中，会留白，不会裁剪 UIViewContentModeScaleAspectFill, // 按原图比例填充，使图片展示在bouns中，可能会被裁剪 UIViewContentModeRedraw, // 原图重新绘制在 bounds 内，充满 (calls -setNeedsDisplay) UIViewContentModeCenter, // 图片显示在 imageview 的正中间，原图大小，可能会被裁剪 UIViewContentModeTop, // 图片从 imageview 的上部开始显示，原图大小，可能会被裁剪 UIViewContentModeBottom, // 图片从 imageview 的下部开始显示，原图大小，可能会被裁剪 UIViewContentModeLeft, // 图片从 imageview 的左部开始显示，原图大小，可能会被裁剪 UIViewContentModeRight, // 图片从 imageview 的右部开始显示，原图大小，可能会被裁剪 UIViewContentModeTopLeft, // 图片从 imageview 的左上部开始显示，原图大小，可能会被裁剪 UIViewContentModeTopRight, // 图片从 imageview 的右上部开始显示，原图大小，可能会被裁剪 UIViewContentModeBottomLeft, // 图片从 imageview 的左下部开始显示，原图大小，可能会被裁剪 UIViewContentModeBottomRight, // 图片从 imageview 的右下部开始显示，原图大小，可能会被裁剪  </description>
    </item>
    
    <item>
      <title>iOS 原生分享</title>
      <link>https://jepphu.github.io/2019/ios%E5%8E%9F%E7%94%9F%E5%88%86%E4%BA%AB/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2019/ios%E5%8E%9F%E7%94%9F%E5%88%86%E4%BA%AB/</guid>
      <description>优点：使用简单，不用注册分享平台账号，不用导入的 SDK 包
缺点：只能使用系统提供的固定样式，分享的类型受限，只能分享 text、url、image
NSArray *arr = @[result]; UIActivityViewController *activityVC = [[UIActivityViewController alloc] initWithActivityItems:arr applicationActivities:nil]; activityVC.completionWithItemsHandler = ^(UIActivityType _Nullable activityType, BOOL completed, NSArray * _Nullable returnedItems, NSError * _Nullable activityError) { if (completed) { NSLog(@&amp;quot;share completed&amp;quot;); } else { NSLog(@&amp;quot;share failed&amp;quot;); } }; [self presentViewController:activityVC animated:YES completion:nil];  arr 支持 UIActivity 类型，可以创建自定义的 Activity，同时分享 NSString，UIImage，NSURL</description>
    </item>
    
    <item>
      <title>SFSafariViewController</title>
      <link>https://jepphu.github.io/2018/sfsafariviewcontroller/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/sfsafariviewcontroller/</guid>
      <description>不用跳出 app，直接在 app 内打开隐私协议等网址
#import &amp;lt;SafariServices/SafariServices.h&amp;gt;  &amp;lt;SFSafariViewControllerDelegate&amp;gt;  - (IBAction)action:(id)sender { NSURL *url = [NSURL URLWithString:@&amp;quot;https://jepphu.github.io/&amp;quot;]; SFSafariViewController *safariVC = [[SFSafariViewController alloc] initWithURL:url]; safariVC.delegate = self; // self.navigationController.navigationBarHidden = YES; // [self.navigationController pushViewController:safariVC animated:YES]; [self presentViewController:safariVC animated:YES completion:nil]; } // 加载完成 - (void)safariViewController:(SFSafariViewController *)controller didCompleteInitialLoad:(BOOL)didLoadSuccessfully { } // 按钮 Done - (void)safariViewControllerDidFinish:(SFSafariViewController *)controller { }  </description>
    </item>
    
    <item>
      <title>UINavigationBar</title>
      <link>https://jepphu.github.io/2018/uinavgationbar%E5%BA%95%E9%83%A8%E7%9A%84%E7%BA%BF/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/uinavgationbar%E5%BA%95%E9%83%A8%E7%9A%84%E7%BA%BF/</guid>
      <description>UINavgationBar 设置颜色 UINavigationController *nav = self.navigationController; nav.navigationBar.tintColor = [UIColor whiteColor]; nav.navigationBar.barTintColor = [UIColor colorWithRed:28/255.0 green:152/255.0 blue:225/255.0 alpha:1.0]; nav.navigationBar.titleTextAttributes = @{NSForegroundColorAttributeName :[UIColor whiteColor]};  此时会觉得 navigationbar 颜色很浅，因为这是半透明状态
默认 navigationbar.translucent = YES
改为 navigationbar.translucent = NO
颜色问题解决，但是子控制器视图整体下移，加上下面这句
self.extendedLayoutIncludesOpaqueBars = YES;
或者在 storyboard 中 viewController 属性勾选 Under Opaque Bars
如果有特殊需求，尝试使用下面的方法
透明化和显示 UINavigationBar 以及 UINavigationBar 底部的线  方法1：  - (UIImageView *)navigationBarLineUnder:(UIView *)navigationBar { if ([navigationBar isKindOfClass:[UIImageView class]] &amp;amp;&amp;amp; navigationBar.bounds.size.height &amp;lt;= 1.0) { return (UIImageView *)navigationBar; } for (UIView *subview in navigationBar.</description>
    </item>
    
    <item>
      <title>present 一个 navigation</title>
      <link>https://jepphu.github.io/2018/present%E4%B8%80%E4%B8%AAnavigation/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/present%E4%B8%80%E4%B8%AAnavigation/</guid>
      <description>在 present 页面之后的页面需要使用 navigation
UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:logInVC]; nav.navigationBar.tintColor = [UIColor colorWithRed:51/255.0 green:51/255.0 blue:51/255.0 alpha:1.0]; nav.navigationBar.barTintColor = [UIColor whiteColor]; nav.navigationBar.titleTextAttributes = @{NSForegroundColorAttributeName :[UIColor colorWithRed:51/255.0 green:51/255.0 blue:51/255.0 alpha:1.0]}; [self presentViewController:nav animated:NO completion:nil];  为 present 出来的 navigation 添加返回按钮
if (self.navigationController.navigationItem.hidesBackButton) { self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@&amp;quot;Back&amp;quot; style:UIBarButtonItemStylePlain target:self action:@selector(dismissVC)]; } - (void)dismissVC { [self dismissViewControllerAnimated:YES completion:nil]; }  </description>
    </item>
    
    <item>
      <title>image 绘制、裁剪、水印、保存</title>
      <link>https://jepphu.github.io/2018/image%E7%BB%98%E5%88%B6%E8%A3%81%E5%89%AA%E6%B0%B4%E5%8D%B0%E4%BF%9D%E5%AD%98/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/image%E7%BB%98%E5%88%B6%E8%A3%81%E5%89%AA%E6%B0%B4%E5%8D%B0%E4%BF%9D%E5%AD%98/</guid>
      <description>绘制空白的 image UIColor *color = [UIColor whiteColor]; CGSize size = CGSizeMake(300, 300); // 开启图片上下文 // UIGraphicsBeginImageContext(size); // 第三个参数 创建的图片根据屏幕的缩放比例来生成 两倍 或 三倍 像素大小 // 第三个参数 传 0 等同于 [UIScreen mainScreen].scale UIGraphicsBeginImageContextWithOptions(size, NO, 0); CGContextRef context = UIGraphicsGetCurrentContext(); CGContextSetFillColorWithColor(context, color.CGColor); CGContextFillRect(context, rect); UIImage *image = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext();  裁剪图片 UIImage *image = [UIImage imageNamed:@&amp;quot;me&amp;quot;]; UIGraphicsBeginImageContextWithOptions(image.size, NO, 0); CGContextRef ctx = UIGraphicsGetCurrentContext(); CGContextAddArc(ctx, image.size.width * 0.5, image.size.height * 0.5, image.size.width * 0.</description>
    </item>
    
    <item>
      <title>App 发送邮件</title>
      <link>https://jepphu.github.io/2018/app%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/app%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</guid>
      <description>iOS App 发送邮件 #import &amp;lt;MessageUI/MessageUI.h&amp;gt;  &amp;lt;MFMailComposeViewControllerDelegate&amp;gt;  [self sendEmail:@&amp;quot;jepp.hu@mail.com&amp;quot;];  - (void)sendEmail:(NSString *)email { if ([MFMailComposeViewController canSendMail]) { // [self.navigationController presentViewController:[self configuredMailComposeViewControllerWithEmail:email] animated:YES completion:nil]; [self presentViewController:[self configuredMailComposeViewControllerWithEmail:email] animated:YES completion:nil]; } else { UIAlertController *sendMailErrorAlert = [UIAlertController alertControllerWithTitle:@&amp;quot;Can not send&amp;quot; message:@&amp;quot;Please set your email&amp;quot; preferredStyle:UIAlertControllerStyleAlert]; [sendMailErrorAlert addAction:[UIAlertAction actionWithTitle:@&amp;quot;OK&amp;quot; style:UIAlertActionStyleDefault handler:nil]]; // [self.navigationController presentViewController:sendMailErrorAlert animated:YES completion:nil]; [self presentViewController:sendMailErrorAlert animated:YES completion:nil]; } } - (MFMailComposeViewController *)configuredMailComposeViewControllerWithEmail:(NSString *)email { MFMailComposeViewController *mfVC = [[MFMailComposeViewController alloc] init]; mfVC.</description>
    </item>
    
    <item>
      <title>iOS 约束布局与动画</title>
      <link>https://jepphu.github.io/2018/ios%E7%BA%A6%E6%9D%9F%E5%B8%83%E5%B1%80%E4%B8%8E%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Sun, 10 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/ios%E7%BA%A6%E6%9D%9F%E5%B8%83%E5%B1%80%E4%B8%8E%E5%8A%A8%E7%94%BB/</guid>
      <description>在控件被添加了约束的情况下，修改 frame 是无法实现的动画的
 修改约束的值 调用 layoutIfNeeded，要注意调用时机  self.viewHeight.constant = 0; [UIView animateWithDuration:0.25 animations:^{ [self.view layoutIfNeeded]; }];  </description>
    </item>
    
    <item>
      <title>UIButton 设置背景图片</title>
      <link>https://jepphu.github.io/2018/uibutton%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/uibutton%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</guid>
      <description>背景图自适应尺寸拉伸
[button setBackgroundImage:image forState:UIControlStateNormal];
背景图不拉伸
[button setImage:image forState:UIControlStateNormal];
关闭按钮点击时高亮的效果, 但是高亮的状态还在,只是效果没了
button.adjustsImageWhenDisabled = NO;</description>
    </item>
    
    <item>
      <title>UIImage 渲染</title>
      <link>https://jepphu.github.io/2018/uiimage%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/uiimage%E6%B8%B2%E6%9F%93/</guid>
      <description>UIImage 有个 UIImageRenderingMode 属性，默认为 UIImageRenderingModeAutomatic
- (UIImage *)imageWithRenderingMode:(UIImageRenderingMode)renderingMode; typedef NS_ENUM(NSInteger, UIImageRenderingMode) { UIImageRenderingModeAutomatic, // 根据图片所处的绘图上下文自动调整渲染模式 UIImageRenderingModeAlwaysOriginal, // 始终绘制图片原始状态，不使用 Tint Color 渲染 UIImageRenderingModeAlwaysTemplate, // 始终根据环境的 Tint Color 渲染图片，忽略图片的本身的颜色信息 }  这个属性会导致一个常见的问题：UITabBarItem 上的 image 颜色与设置的原图不同 让 image 保持原图不被渲染有两种方法
 代码设置，这个只是局部的修改  UIImage *leftImage = [[UIImage imageNamed:@&amp;quot;icon_s&amp;quot;] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]; self.navigationItem.leftBarButtonItem.image = leftImage;   进入 Assets.xcassets，找到图片资源，在属性栏中有 Render As 属性，选中 Original Image  在整个工程中，使用到这个 image 都不会被环境的 Tint Color 渲染
可以利用这个属性来将 image 渲染成想要的颜色 设置环境的 Tint Color，</description>
    </item>
    
    <item>
      <title>UIView 事件拦截</title>
      <link>https://jepphu.github.io/2018/uiview%E4%BA%8B%E4%BB%B6%E6%8B%A6%E6%88%AA/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/uiview%E4%BA%8B%E4%BB%B6%E6%8B%A6%E6%88%AA/</guid>
      <description>hitTest: 方法会递归来寻找第一响应者  判断 point 是否在自身范围内，不在则返回 nil，在则执行第 2 步 检查 subViews，判断 point 是否在 subView 范围内，在则返回 subView（此时 subView 成为第一响应者，subView会执行 hitTest:） 如果所有 subViews 都不包含 point，只有自身包含（第1步）那就返回 self（自身成为第一响应者）  subViews 上的事件全部由父 View 来实现 重写父级 View 的 hitTest 方法，返回 self，自身成为第一响应者
subViews 的 touch 相关方法不会响应
- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event{ // 直接返回 self 这样自身就成为了第一响应者 subViews 不能够接受到响应事件 if (CGRectContainsPoint(self.bounds, point)) { return self; } return nil; }  允许部分 subViews 响应事件 重写父级 View 的 hitTest 方法，返回某个 subView，subView 成为第一响应者</description>
    </item>
    
    <item>
      <title>UIView 子视图坐标转换</title>
      <link>https://jepphu.github.io/2018/uiview%E5%AD%90%E8%A7%86%E5%9B%BE%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/uiview%E5%AD%90%E8%A7%86%E5%9B%BE%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/</guid>
      <description>ViewA, ViewB, ViewC
ViewA 是 ViewB 的父视图，ViewB 是 ViewC 的父视图
ViewC 此时的 frame 是相对于 ViewB 的
如果需求为获取 ViewC 此时相对于 ViewA 的 frame
- (CGRect)convertRect:(CGRect)rect toView:(nullable UIView *)view; - (CGRect)convertRect:(CGRect)rect fromView:(nullable UIView *)view; CGRect frame = [ViewB convertRect:ViewC.frame toView:ViewA]; //或 CGRect frame = [ViewA convertRect:ViewC.frame fromView:ViewB];  </description>
    </item>
    
    <item>
      <title>收回键盘</title>
      <link>https://jepphu.github.io/2018/%E6%94%B6%E5%9B%9E%E9%94%AE%E7%9B%98/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/%E6%94%B6%E5%9B%9E%E9%94%AE%E7%9B%98/</guid>
      <description>收回键盘主要调用方法：
[self.view endEditing:YES] //或 [self.emailTextField resignFirstResponder]   ViewController :  - (void)touchesBegan:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event { [self.view endEditing:YES]; }   TableViewController :  - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{ [self.view endEditing:YES]; }  // 弹出键盘
[self.textField becomeFirstResponder]  </description>
    </item>
    
    <item>
      <title>UITableViewCell 改变选时中颜色</title>
      <link>https://jepphu.github.io/2018/uitableviewcell%E6%94%B9%E5%8F%98%E9%80%89%E6%97%B6%E4%B8%AD%E9%A2%9C%E8%89%B2/</link>
      <pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/uitableviewcell%E6%94%B9%E5%8F%98%E9%80%89%E6%97%B6%E4%B8%AD%E9%A2%9C%E8%89%B2/</guid>
      <description>TableViewCell 有一个 selectedBackgroundView 属性
创建一个 View 设为 selectedBackgroundView，就可以改变选中状态下的 cell
UIView *view = [[UIView alloc] initWithFrame:self.bounds]; view.backgroundColor = [UIColor whiteColor]; self.selectedBackgroundView = view;  </description>
    </item>
    
    <item>
      <title>WKWebView 注入js、处理超链接和文件选择</title>
      <link>https://jepphu.github.io/2017/wkwebview-%E6%B3%A8%E5%85%A5js%E5%A4%84%E7%90%86%E8%B6%85%E9%93%BE%E6%8E%A5%E5%92%8C%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2017/wkwebview-%E6%B3%A8%E5%85%A5js%E5%A4%84%E7%90%86%E8%B6%85%E9%93%BE%E6%8E%A5%E5%92%8C%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9/</guid>
      <description>&amp;lt;WKNavigationDelegate, WKUIDelegate&amp;gt;  self.webView.navigationDelegate = self; self.webView.UIDelegate = self;  注入 JavaScript 代码 NSString *path = [[NSBundle mainBundle]pathForResource:@&amp;quot;untitled&amp;quot; ofType:@&amp;quot;js&amp;quot;]; NSString *js = [NSString stringWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil]; [webView evaluateJavaScript:js completionHandler:nil];  处理超链接，用浏览器打开 - (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler { NSURL *url = navigationAction.request.URL; if (navigationAction.navigationType == WKNavigationTypeLinkActivated) { [[UIApplication sharedApplication] openURL:url]; // [[NSWorkspace sharedWorkspace] openURL:url]; decisionHandler(WKNavigationActionPolicyCancel); } else { decisionHandler(WKNavigationActionPolicyAllow); } }  处理网页中的文件选择 - (void)webView:(WKWebView *)webView runOpenPanelWithParameters:(WKOpenPanelParameters *)parameters initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(NSArray&amp;lt;NSURL *&amp;gt; * _Nullable))completionHandler { NSOpenPanel *panel = [NSOpenPanel openPanel]; [panel beginSheetModalForWindow:self.</description>
    </item>
    
    <item>
      <title>WKWebView 清除 cookies</title>
      <link>https://jepphu.github.io/2017/wkwebview%E6%B8%85%E9%99%A4cookies/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2017/wkwebview%E6%B8%85%E9%99%A4cookies/</guid>
      <description>NSSet *websiteDataTypes = [WKWebsiteDataStore allWebsiteDataTypes]; NSDate *dateFrom = [NSDate dateWithTimeIntervalSince1970:0]; [[WKWebsiteDataStore defaultDataStore] removeDataOfTypes:websiteDataTypes modifiedSince:dateFrom completionHandler:^{}];  </description>
    </item>
    
    <item>
      <title>viewController 生命周期</title>
      <link>https://jepphu.github.io/2016/viewcontroller%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Wed, 28 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2016/viewcontroller%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>viewController 生命周期  viewController 的创建 （xib，storyBoard）
- (instancetype)initWithCoder:(NSCoder *)aDecoder;
 view 的创建
- (void)loadView;
 view 是懒加载的 只有系统认为需要生成一个 view 的时候，才会调用这个方法来创建一个 view，这个时候通常是 presentViewController: 或 pushViewController: 的时候 当只有 viewController 的初始化的时候，不会创建一个 view， 也不会走 - (void)viewDidLoad 想要不 presentViewController: 或 pushViewController: 的情况下创建 view，访问一下 view 即可，[ViewController view] 一但重写了 loadView，需要自己创建 view，这个时候可以生成一个 UIImageView , WKWebView 等其它 view    - (void)loadView { UIImageView *imageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&amp;quot;Default&amp;quot;]]; imageView.frame = [UIScreen mainScreen].bounds; imageView.userInteractionEnabled = YES; self.</description>
    </item>
    
  </channel>
</rss>