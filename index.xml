<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jepp Hu on Jepp Hu</title>
    <link>https://jepphu.github.io/</link>
    <description>Recent content in Jepp Hu on Jepp Hu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Apr 2019 10:42:33 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>1. 熟悉 Objective-C 的根源</title>
      <link>https://jepphu.github.io/2019/1.-%E7%86%9F%E6%82%89-objective-c-%E7%9A%84%E6%A0%B9%E6%BA%90/</link>
      <pubDate>Tue, 30 Apr 2019 10:42:33 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/1.-%E7%86%9F%E6%82%89-objective-c-%E7%9A%84%E6%A0%B9%E6%BA%90/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Objective-C 是 C 的超集，在 C 的基础上增加了面向对象的功能。
相比使用结构体，在使用对象的时候产生的开销可能会影响性能，例如分配和释放堆内存。
当不需要保存对象类型的时候，尽量使用诸如CGRect之类的结构体。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Objective-C 使用具有动态绑定的消息传递结构，而不是函数调用：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Messaging
Object *obj = [Object new];
[obj performWith:parameter1 and:parameter2];
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;Object *obj = new Object;
obj-&amp;gt;perform(parameter1, parameter2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关键的不同在于：消息传递结构中，由 Runtime 决定哪些代码被执行，编译器不关心接收消息的对象的类型，而是通过一个动态绑定的过程，在运行时去查找对象的类型。而函数调用中则由编译器来决定哪些代码被执行。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;理解 C 的核心概念将有助于您编写有效的 Objective-C。 特别是需要了解内存模型和指针。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2. 在头文件中尽可能少的引入其他头文件</title>
      <link>https://jepphu.github.io/2019/2.-%E5%9C%A8%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B0%BD%E5%8F%AF%E8%83%BD%E5%B0%91%E7%9A%84%E5%BC%95%E5%85%A5%E5%85%B6%E4%BB%96%E5%A4%B4%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 30 Apr 2019 10:42:33 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/2.-%E5%9C%A8%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B0%BD%E5%8F%AF%E8%83%BD%E5%B0%91%E7%9A%84%E5%BC%95%E5%85%A5%E5%85%B6%E4%BB%96%E5%A4%B4%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如非必要，不要头文件中引入头文件，而用 &lt;code&gt;@class Obj&lt;/code&gt; 来告诉编译器这个是一个类，在实现文件中再引入头文件。
这样可以加快编译速度，降低类之间的耦合，并减少可能循环引用的问题。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;有时候需要声明一个类遵循一项协议。这种情况下首先尽可能将“遵循协议”的代码写到类的扩展中去，从而避免在头文件中引用头文件，如果不行，那么将协议声明的代码单独放到一个头文件中，再去头文件中引用这个头文件，避免引入了其他类的声明。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>3. 多用字面语法，少用等价的其他语法</title>
      <link>https://jepphu.github.io/2019/3.-%E5%A4%9A%E7%94%A8%E5%AD%97%E9%9D%A2%E8%AF%AD%E6%B3%95%E5%B0%91%E7%94%A8%E7%AD%89%E4%BB%B7%E7%9A%84%E5%85%B6%E4%BB%96%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Tue, 30 Apr 2019 10:42:33 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/3.-%E5%A4%9A%E7%94%A8%E5%AD%97%E9%9D%A2%E8%AF%AD%E6%B3%95%E5%B0%91%E7%94%A8%E7%AD%89%E4%BB%B7%E7%9A%84%E5%85%B6%E4%BB%96%E8%AF%AD%E6%B3%95/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;使用字面语法去创建 string，numbers，arrays 和 dictionaries，比起使用常规的对象方法相比要更简明&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *someStr = @&amp;quot;Objective-C&amp;quot;;
NSString *someStr = [NSString stringWithFormat:@&amp;quot;%@&amp;quot;,@&amp;quot;Objective-C&amp;quot;];

NSNumber *someNum = @6;
NSNumber *someNum = [NSNumber numberWithInt:6];

NSArray *animals = @[@&amp;quot;cat&amp;quot;,@&amp;quot;dog&amp;quot;,@&amp;quot;mouse&amp;quot;];
NSArray *animals = [NSArray arrayWithObjects:@&amp;quot;cat&amp;quot;,@&amp;quot;dog&amp;quot;,@&amp;quot;mouse&amp;quot;, nil];

NSDictionary *personData =
  @{@&amp;quot;firstName&amp;quot; : @&amp;quot;Matt&amp;quot;,
    @&amp;quot;lastName&amp;quot; : @&amp;quot;Galloway&amp;quot;,
    @&amp;quot;age&amp;quot; : [NSNumber numberWithInt:28]};
NSDictionary *personData = [NSDictionary dictionaryWithObjectsAndKeys:@&amp;quot;Matt&amp;quot;, @&amp;quot;firstName&amp;quot;, @&amp;quot;Galloway&amp;quot;, @&amp;quot;lastName&amp;quot;, [NSNumber numberWithInt:28], @&amp;quot;age&amp;quot;, nil];
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用取下标操作来访问/修改数组下标对应的元素或者字典中健所对应的值&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *str = animals[1];
NSString *str = [animals objectAtIndex:1];

NSString *lastName = personData[@&amp;quot;personData&amp;quot;];
NSString *lastName = [personData objectForKey:@&amp;quot;lastName&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;一定要确保插入数组和字典中的对象没有 nil，否则会抛出异常&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>4. 多用类型常量，少用预处理指令 #define</title>
      <link>https://jepphu.github.io/2019/4.-%E5%A4%9A%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%B8%B8%E9%87%8F%E5%B0%91%E7%94%A8%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Tue, 30 Apr 2019 10:42:33 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/4.-%E5%A4%9A%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%B8%B8%E9%87%8F%E5%B0%91%E7%94%A8%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4/</guid>
      <description>&lt;p&gt;宏定义常量属于预处理指令定义常量，会增加编译时间。对于常量的定义，使用类型常量定义，可减少编译时间，编译时类型报错也会提示，单独放在工程项目的某一个常量文件中更具可读性。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不要用预处理指令定义常量。这样定义出来的常量不含类型信息，编译器只会在编译前执行查找与替换操作。即使有人重新定义了常量值，编译器也不会产生警告信息，这将导致应用程序中的常量值不一致；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在实现文件中使用 &lt;code&gt;static const&lt;/code&gt; 来定义“只在编译单元内可见的常量”（translation-unit-specific constant）。一个 .m 文件就是一个编译单元。由于此常量不在全局符号表中，所以无需为其名称加前缀。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//.m
static const NSTiemInterval AnimationDuration = 0.3;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;在头文件中使用 &lt;code&gt;extern&lt;/code&gt; 来声明全局常量，并在相关实现文件中定义其值。这种常量要出现在全局符号表中，所以其名称应加以区分，通常用与之相关的类名做前缀。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//.h
extern NSString *const SomeString;
extern const NSTiemInterval AnimationDuration;

//.m
NSString *const SomeString = @&amp;quot;Debug&amp;quot;;
const NSTiemInterval AnimationDuration = 0.3;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>5. 用枚举表示状态、选项、状态码</title>
      <link>https://jepphu.github.io/2019/5.-%E7%94%A8%E6%9E%9A%E4%B8%BE%E8%A1%A8%E7%A4%BA%E7%8A%B6%E6%80%81%E9%80%89%E9%A1%B9%E7%8A%B6%E6%80%81%E7%A0%81/</link>
      <pubDate>Tue, 30 Apr 2019 10:42:33 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/5.-%E7%94%A8%E6%9E%9A%E4%B8%BE%E8%A1%A8%E7%A4%BA%E7%8A%B6%E6%80%81%E9%80%89%E9%A1%B9%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;用枚举来表示状态机的状态、传递给方法的选项以及错误状态码等值，给这些值起个易懂的名字&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;typedef NS_ENUM(NSUInteger, EOCConnectionState) {
    EOCConnectionStateDisConnected = 1,
    EOCConnectionStateConnecting,
    EOCConnectionStateConnected,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果把传递给某个方法的选项表示为枚举类型，而多个选项又可同时使用，那么就将各选项定义为 2 的幂，以便通过按位或操作将其组合起来&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;typedef NS_OPTIONS(NSUInteger, UIViewAutoresizing) {
    UIViewAutoresizingNone                 = 0,
    UIViewAutoresizingFlexibleLeftMargin   = 1 &amp;lt;&amp;lt; 0,
    UIViewAutoresizingFlexibleWidth        = 1 &amp;lt;&amp;lt; 1,
    UIViewAutoresizingFlexibleRightMargin  = 1 &amp;lt;&amp;lt; 2,
    UIViewAutoresizingFlexibleTopMargin    = 1 &amp;lt;&amp;lt; 3,
    UIViewAutoresizingFlexibleHeight       = 1 &amp;lt;&amp;lt; 4,
    UIViewAutoresizingFlexibleBottomMargin = 1 &amp;lt;&amp;lt; 5
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用 NS_ENUM 与 NS_OPTIONS 宏来定义枚举类型，并指明其底层数据类型。这样可以确保枚举是用开发者所选的底层数据类型实现出来的，而不会采用编译器所选的类型。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果需要以按位或操作来组合的枚举都应该使用 NS_OPTIONS 宏，若枚举不需要互相组合，可以使用NS_ENUM 来定义，NS_ENUM 和 NS_OPTIONS 本质是一样的，仅仅从字面上来区分其用途，采用不同的宏来从代码角度来区分，而 enum 是 C 语言的枚举，OC 也同样适用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在处理枚举类型的switch语句中不要实现default分支。这样的话，加入新枚举之后，编译器就会提示开发者：switch语句并未处理所有枚举。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;switch (_currentState) {
    case EOCConnectionStateDisConnected:
        //
        break;
    case EOCConnectionStateConnecting:
        //
        break;
    case EOCConnectionStateConnected:
        //
        break;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NSJSONSerialization</title>
      <link>https://jepphu.github.io/2019/nsjsonserialization/</link>
      <pubDate>Fri, 15 Mar 2019 17:19:34 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/nsjsonserialization/</guid>
      <description>

&lt;h3 id=&#34;json-序列化&#34;&gt;JSON 序列化&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 输出的 json 字符串就是一整行
NSJSONWritingSortedKeys
// 是将生成的 json 数据格式化输出，这样可读性高，不设置则输出的 json 字符串就是一整行
NSJSONWritingPrettyPrinted
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;+ (NSString *)jsonStringEncodedWithDic:(NSDictionary *)dic {
    if ([NSJSONSerialization isValidJSONObject:dic]) {
        NSError *error;
        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dic options:0 error:&amp;amp;error];
        NSString *json = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        return json;
    }
    return nil;
}

+ (NSString *)jsonPrettyStringEncodedWithDic:(NSDictionary *)dic {
    if ([NSJSONSerialization isValidJSONObject:dic]) {
        NSError *error;
        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dic options:NSJSONWritingPrettyPrinted error:&amp;amp;error];
        NSString *json = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        return json;
    }
    return nil;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;json-反序列化&#34;&gt;JSON 反序列化&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 返回的对象是不可变的，NSDictionary 或 NSArray
kNilOptions
// 返回可变容器，NSMutableDictionary 或 NSMutableArray，返回的是数组字典嵌套的情况，每一层都是可变的
NSJSONReadingMutableContainers
// 返回的 JSON 对象中字符串的值类型为 NSMutableString
NSJSONReadingMutableLeaves
// 允许JSON字符串最外层既不是 NSArray 也不是 NSDictionary，但必须是有效的JSON Fragment
NSJSONReadingAllowFragments     
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;+ (id)jsonValueDecodedWithStr:(NSString *)str {
    NSData *data = [str dataUsingEncoding:NSUTF8StringEncoding];
    NSError *error;
    id value = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&amp;amp;error];
    if (error) {
        NSLog(@&amp;quot;%s error:%@&amp;quot;, __func__, error);
    }
    return value;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NSString 语音阅读</title>
      <link>https://jepphu.github.io/2019/nsstring%E8%AF%AD%E9%9F%B3%E9%98%85%E8%AF%BB/</link>
      <pubDate>Fri, 15 Mar 2019 17:15:22 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/nsstring%E8%AF%AD%E9%9F%B3%E9%98%85%E8%AF%BB/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;AVSpeechSynthesizer *synthesize = [[AVSpeechSynthesizer alloc]init];
AVSpeechUtterance *utterance = [[AVSpeechUtterance alloc]initWithString:self.textView.text];
[synthesize speakUtterance:utterance];
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NSString 复制到剪切板</title>
      <link>https://jepphu.github.io/2019/nsstring%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF/</link>
      <pubDate>Fri, 15 Mar 2019 17:11:42 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/nsstring%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];
pasteboard.string = self.textView.text;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NSString 与 UTF-8</title>
      <link>https://jepphu.github.io/2019/nsstring%E4%B8%8Eutf-8/</link>
      <pubDate>Fri, 15 Mar 2019 17:02:35 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/nsstring%E4%B8%8Eutf-8/</guid>
      <description>

&lt;h3 id=&#34;nsstring-转-uft-8-编码&#34;&gt;NSString 转 UFT-8 编码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *text = @&amp;quot;你好, 世界&amp;quot;;
NSCharacterSet *charSet = [[NSCharacterSet characterSetWithCharactersInString:text] invertedSet];
text = [text stringByAddingPercentEncodingWithAllowedCharacters:charSet];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;uft-8-转-nsstring-解码&#34;&gt;UFT-8 转 NSString 解码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString *text = [text stringByRemovingPercentEncoding];
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>不使用 storyBoard</title>
      <link>https://jepphu.github.io/2019/%E4%B8%8D%E4%BD%BF%E7%94%A8storyboard/</link>
      <pubDate>Fri, 15 Mar 2019 15:56:28 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/%E4%B8%8D%E4%BD%BF%E7%94%A8storyboard/</guid>
      <description>

&lt;h3 id=&#34;纯代码的方式开始搭建界面&#34;&gt;纯代码的方式开始搭建界面&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
    UIViewController *redView = [[UIViewController alloc] init];
    redView.view.backgroundColor = [UIColor redColor];

    //1. 直接以 UIViewController 作为 window 的根控制器
//    self.window.rootViewController = redView;
//    [self.window makeKeyAndVisible];

    //2. 以 UINavigationController 作为 window 的根控制器(44px)
//    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:redView];
//    nav.view.backgroundColor = [UIColor grayColor];
//    self.window.rootViewController = nav;
//    [self.window makeKeyAndVisible];

    //3. 以 UITabBarController 作为 window 的根控制器
    UITabBarController *tabBarController = [[UITabBarController alloc] init];
    UIViewController *v1 = [[UIViewController alloc] init];
    v1.view.backgroundColor = [UIColor redColor];
    v1.tabBarItem.badgeValue = @&amp;quot;v1&amp;quot;;
    UIViewController *v2 = [[UIViewController alloc] init];
    v2.view.backgroundColor = [UIColor greenColor];
    v2.tabBarItem.badgeValue = @&amp;quot;666&amp;quot;;
    [tabBarController addChildViewController:v1];
    [tabBarController addChildViewController:v2];

    self.window.rootViewController = tabBarController;
    [self.window makeKeyAndVisible];
    return YES;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>UIGestureRecognizer</title>
      <link>https://jepphu.github.io/2019/uigesturerecognizer/</link>
      <pubDate>Fri, 15 Mar 2019 15:45:29 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/uigesturerecognizer/</guid>
      <description>

&lt;h3 id=&#34;点击&#34;&gt;点击&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// 创建点击手势对象
UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tap:)];
// 几个手指
tap.numberOfTouchesRequired = 2;
// 点击几次
tap.numberOfTapsRequired = 2;
// 给 View 添加一个手势
[self.imageView addGestureRecognizer:tap];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;长按&#34;&gt;长按&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPress:)];
// 长按时间
longPress.minimumPressDuration = 0.5;
// 在长按时移动允许的误差范围, 超过范围 误差失效
longPress.allowableMovement = 50;
[self.imageView addGestureRecognizer:longPress];
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)longPress:(UILongPressGestureRecognizer *)sender {
    // 默认长按移动时会一直执行, 放开时也会执行, 加个判断, 只执行一次
    if (sender.state == UIGestureRecognizerStateBegan) {
        NSLog(@&amp;quot;%s&amp;quot;, __FUNCTION__);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;清扫&#34;&gt;清扫&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;UISwipeGestureRecognizer *swipe = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipe:)];
// 控制识别的手势方向, 默认识别从左往右, 此处改为从右往左
swipe.direction = UISwipeGestureRecognizerDirectionLeft;
[self.imageView addGestureRecognizer:swipe];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;旋转&#34;&gt;旋转&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;UIRotationGestureRecognizer *rotation = [[UIRotationGestureRecognizer alloc] initWithTarget:self action:@selector(rotation:)];
[self.imageView addGestureRecognizer:rotation];
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)rotation:(UIRotationGestureRecognizer *)sender {
    NSLog(@&amp;quot;%s--%f&amp;quot;, __FUNCTION__, sender.rotation);
    self.imageView.transform = CGAffineTransformRotate(self.imageView.transform, sender.rotation);
    // 恢复到初始状态, 避免叠加旋转
    sender.rotation = 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;捏合&#34;&gt;捏合&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;UIPinchGestureRecognizer *pinch = [[UIPinchGestureRecognizer alloc] initWithTarget:self action:@selector(pinch:)];
[self.imageView addGestureRecognizer:pinch];
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)pinch:(UIPinchGestureRecognizer *)sender {
    NSLog(@&amp;quot;%s--%f&amp;quot;, __FUNCTION__, sender.scale);
    self.imageView.transform = CGAffineTransformScale(self.imageView.transform, sender.scale, sender.scale);
    // 恢复到初始状态, 避免叠加
    sender.scale = 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;拖拽&#34;&gt;拖拽&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(pan:)];
[self.imageView addGestureRecognizer:pan];
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)pan:(UIPanGestureRecognizer *)sender {
    CGPoint p = [sender translationInView:sender.view];
    self.imageView.transform = CGAffineTransformTranslate(self.imageView.transform, p.x, p.y);
    NSLog(@&amp;quot;%s--%@&amp;quot;, __FUNCTION__, NSStringFromCGPoint(p));
    // 恢复到初始状态, 避免叠加
    [sender setTranslation:CGPointZero inView:sender.view];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;手势冲突&#34;&gt;手势冲突&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// &amp;lt;UIGestureRecognizerDelegate&amp;gt;
// 旋转和拖放手势冲突, 通过代理解决, 可以同时使用
rotation.delegate = self;
pinch.delegate = self;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {
    return YES;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>信号量实现 NSURLSession 的同步请求</title>
      <link>https://jepphu.github.io/2019/%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%AE%9E%E7%8E%B0nsurlsession%E7%9A%84%E5%90%8C%E6%AD%A5%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Thu, 07 Mar 2019 18:46:19 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%AE%9E%E7%8E%B0nsurlsession%E7%9A%84%E5%90%8C%E6%AD%A5%E8%AF%B7%E6%B1%82/</guid>
      <description>&lt;p&gt;NSURLSession 只有异步请求&lt;/p&gt;

&lt;p&gt;通过信号量来实现同步&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSURL *url = [NSURL URLWithString:@&amp;quot;https://jepphu.github.io/&amp;quot;];
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
[request setHTTPMethod:@&amp;quot;GET&amp;quot;];

NSLog(@&amp;quot;1 -- %@&amp;quot;,[NSThread currentThread]);
__block NSURLResponse *resultResponse;
__block NSError *resultError;
__block NSData *resultData;

//创建信号量
dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);
NSURLSessionTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
    resultResponse = response;
    resultError = error;
    resultData = data;
    NSLog(@&amp;quot;2 -- %@&amp;quot;,[NSThread currentThread]);
    //发送信号
    dispatch_semaphore_signal(semaphore);
}];

[task resume];
//等待
dispatch_semaphore_wait(semaphore,DISPATCH_TIME_FOREVER);  
NSLog(@&amp;quot;3 -- %@&amp;quot;,[NSThread currentThread]);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>UIImageView 的 contentMode 属性</title>
      <link>https://jepphu.github.io/2019/uiimageview/</link>
      <pubDate>Tue, 05 Mar 2019 20:11:26 +0800</pubDate>
      
      <guid>https://jepphu.github.io/2019/uiimageview/</guid>
      <description>

&lt;h3 id=&#34;contentmode&#34;&gt;contentMode&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;UIViewContentModeScaleToFill,       // 默认，对图片进行拉伸处理，不按比例充满 bounds
UIViewContentModeScaleAspectFit,    // 按原图比例进行拉伸，图片完全展示在 bounds 中，会留白，不会裁剪
UIViewContentModeScaleAspectFill,   // 按原图比例填充，使图片展示在bouns中，可能会被裁剪

UIViewContentModeRedraw,            // 原图重新绘制在 bounds 内，充满 (calls -setNeedsDisplay)
UIViewContentModeCenter,            // 图片显示在 imageview 的正中间，原图大小，可能会被裁剪

UIViewContentModeTop,               // 图片从 imageview 的上部开始显示，原图大小，可能会被裁剪
UIViewContentModeBottom,            // 图片从 imageview 的下部开始显示，原图大小，可能会被裁剪
UIViewContentModeLeft,              // 图片从 imageview 的左部开始显示，原图大小，可能会被裁剪
UIViewContentModeRight,             // 图片从 imageview 的右部开始显示，原图大小，可能会被裁剪
UIViewContentModeTopLeft,           // 图片从 imageview 的左上部开始显示，原图大小，可能会被裁剪
UIViewContentModeTopRight,          // 图片从 imageview 的右上部开始显示，原图大小，可能会被裁剪
UIViewContentModeBottomLeft,        // 图片从 imageview 的左下部开始显示，原图大小，可能会被裁剪
UIViewContentModeBottomRight,       // 图片从 imageview 的右下部开始显示，原图大小，可能会被裁剪
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>iOS 原生分享</title>
      <link>https://jepphu.github.io/2019/ios%E5%8E%9F%E7%94%9F%E5%88%86%E4%BA%AB/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2019/ios%E5%8E%9F%E7%94%9F%E5%88%86%E4%BA%AB/</guid>
      <description>&lt;p&gt;优点：使用简单，不用注册分享平台账号，不用导入的 SDK 包&lt;/p&gt;

&lt;p&gt;缺点：只能使用系统提供的固定样式，分享的类型受限，只能分享 text、url、image&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSArray *arr = @[result];
UIActivityViewController *activityVC = [[UIActivityViewController alloc] initWithActivityItems:arr applicationActivities:nil];
activityVC.completionWithItemsHandler = ^(UIActivityType  _Nullable activityType, BOOL completed, NSArray * _Nullable returnedItems, NSError * _Nullable activityError) {
    if (completed) {
        NSLog(@&amp;quot;share completed&amp;quot;);
    } else {
        NSLog(@&amp;quot;share failed&amp;quot;);
    }
};
[self presentViewController:activityVC animated:YES completion:nil];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;arr 支持 UIActivity 类型，可以创建自定义的 Activity，同时分享 NSString，UIImage，NSURL&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git 配置多账户</title>
      <link>https://jepphu.github.io/2019/git%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B4%A6%E6%88%B7/</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2019/git%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B4%A6%E6%88%B7/</guid>
      <description>

&lt;h3 id=&#34;1-为不同的账号生成对应的-key&#34;&gt;1. 为不同的账号生成对应的 key&lt;/h3&gt;

&lt;p&gt;检查是否有 .ssh 目录&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;cd ~/.ssh
#如果目录不存在，执行
ssh-keygen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成 github 和 bitbucket 的 key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;cd ~/.ssh
ssh-keygen -t rsa -C &amp;quot;youremail@domain.com&amp;quot;
#执行命令后的第一次输入，输入一个用于区分的自定义名字,不要有空格，如：my_github_rsa，回车
第二次与第三次的输入是为了设定访问 key 的密码，可以直接回车跳过

ssh-keygen -t rsa -C &amp;quot;youremail@domain.com&amp;quot;
#同上自定义名字，如：my_bitbucket_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时在 .ssh 目录下至少会有以下5个文件，.pub 后缀的为公钥，另一个为秘钥&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;config           
my_bitbucket_rsa        my_github_rsa
my_bitbucket_rsa.pub    my_github_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-修改配置文件&#34;&gt;2. 修改配置文件&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;#进入 .ssh 目录，如果目录下没有 config 文件，那么创建
cd ~/.ssh
touch config

#添加以下内容
Host github.com
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/my_github_rsa
Host bitbucket.org
    HostName bitbucket.org
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/my_bitbucket_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Host 字段只是别名，可以任意取，HostName 字段是真实的主机名&lt;/p&gt;

&lt;p&gt;如果 Host 字段任意取名，那么在进行 clone 等操作时要将 URL Host 替换&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;#原本 
git clone git@github.com:xxx/xxx.git
#替换
git clone git@YourHost:xxx/xxx.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-向-github-和-bitbucket-添加秘钥&#34;&gt;3. 向 github 和 bitbucket 添加秘钥&lt;/h3&gt;

&lt;p&gt;将公钥添加在 github 或者 bitbucket 后台中，
以 github 为例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;github 首页右上角头像下拉框 &amp;ndash;&amp;gt; settings &amp;ndash;&amp;gt; SSH and GPG keys&lt;/li&gt;
&lt;li&gt;title 部分，用于区分设备的名称&lt;/li&gt;
&lt;li&gt;key 部分，复制 my_github_rsa.pub 中的内容&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;4-测试&#34;&gt;4. 测试&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;ssh -T git@github.com
#输出 Hi XXX! You&#39;ve successfully authenticated, but GitHub does not provide shell access.

ssh -T git@bitbucket.org
#输出 You can use git or hg to connect to Bitbucket. Shell access is disabled

#测试过程中出现 The authenticity of host &#39;github.com (192.xxx.xxx.xxx)&#39; can&#39;t be established.
RSA key fingerprint is SHA256:...   
输入 yes，回车
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果 Host 字段任意取名为 YourHost，测试&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;ssh -T git@YourHost 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>