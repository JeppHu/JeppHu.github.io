<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jepp Hu on Jepp Hu</title>
    <link>https://jepphu.github.io/</link>
    <description>Recent content in Jepp Hu on Jepp Hu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Feb 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>iOS 原生分享</title>
      <link>https://jepphu.github.io/2019/ios%E5%8E%9F%E7%94%9F%E5%88%86%E4%BA%AB/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2019/ios%E5%8E%9F%E7%94%9F%E5%88%86%E4%BA%AB/</guid>
      <description>&lt;p&gt;优点：使用简单，不用注册分享平台账号，不用导入的 SDK 包&lt;/p&gt;

&lt;p&gt;缺点：只能使用系统提供的固定样式，分享的类型受限，只能分享 text、url、image&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSArray *arr = @[result];
UIActivityViewController *activityVC = [[UIActivityViewController alloc] initWithActivityItems:arr applicationActivities:nil];
activityVC.completionWithItemsHandler = ^(UIActivityType  _Nullable activityType, BOOL completed, NSArray * _Nullable returnedItems, NSError * _Nullable activityError) {
    if (completed) {
        NSLog(@&amp;quot;share completed&amp;quot;);
    } else {
        NSLog(@&amp;quot;share failed&amp;quot;);
    }
};
[self presentViewController:activityVC animated:YES completion:nil];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;arr 支持 UIActivity 类型，可以创建自定义的 Activity，同时分享 NSString，UIImage，NSURL&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git 配置多账户</title>
      <link>https://jepphu.github.io/2019/git%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B4%A6%E6%88%B7/</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2019/git%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B4%A6%E6%88%B7/</guid>
      <description>

&lt;h3 id=&#34;1-为不同的账号生成对应的-key&#34;&gt;1. 为不同的账号生成对应的 key&lt;/h3&gt;

&lt;p&gt;检查是否有 .ssh 目录&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;cd ~/.ssh
#如果目录不存在，执行
ssh-keygen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成 github 和 bitbucket 的 key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;cd ~/.ssh
ssh-keygen -t rsa -C &amp;quot;youremail@domain.com&amp;quot;
#执行命令后的第一次输入，输入一个用于区分的自定义名字,不要有空格，如：my_github_rsa，回车
第二次与第三次的输入是为了设定访问 key 的密码，可以直接回车跳过

ssh-keygen -t rsa -C &amp;quot;youremail@domain.com&amp;quot;
#同上自定义名字，如：my_bitbucket_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时在 .ssh 目录下至少会有以下5个文件，.pub 后缀的为公钥，另一个为秘钥&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;config           
my_bitbucket_rsa        my_github_rsa
my_bitbucket_rsa.pub    my_github_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-修改配置文件&#34;&gt;2. 修改配置文件&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;#进入 .ssh 目录，如果目录下没有 config 文件，那么创建
cd ~/.ssh
touch config

#添加以下内容
Host github.com
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/my_github_rsa
Host bitbucket.org
    HostName bitbucket.org
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/my_bitbucket_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Host 字段只是别名，可以任意取，HostName 字段是真实的主机名&lt;/p&gt;

&lt;p&gt;如果 Host 字段任意取名，那么在进行 clone 等操作时要将 URL Host 替换&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;#原本 
git clone git@github.com:xxx/xxx.git
#替换
git clone git@YourHost:xxx/xxx.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-向-github-和-bitbucket-添加秘钥&#34;&gt;3. 向 github 和 bitbucket 添加秘钥&lt;/h3&gt;

&lt;p&gt;将公钥添加在 github 或者 bitbucket 后台中，
以 github 为例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;github 首页右上角头像下拉框 &amp;ndash;&amp;gt; settings &amp;ndash;&amp;gt; SSH and GPG keys&lt;/li&gt;
&lt;li&gt;title 部分，用于区分设备的名称&lt;/li&gt;
&lt;li&gt;key 部分，复制 my_github_rsa.pub 中的内容&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;4-测试&#34;&gt;4. 测试&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;ssh -T git@github.com
#输出 Hi XXX! You&#39;ve successfully authenticated, but GitHub does not provide shell access.

ssh -T git@bitbucket.org
#输出 You can use git or hg to connect to Bitbucket. Shell access is disabled

#测试过程中出现 The authenticity of host &#39;github.com (192.xxx.xxx.xxx)&#39; can&#39;t be established.
RSA key fingerprint is SHA256:...   
输入 yes，回车
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果 Host 字段任意取名为 YourHost，测试&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;ssh -T git@YourHost 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>BaiduPCS Go</title>
      <link>https://jepphu.github.io/2019/baidupcs-go/</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2019/baidupcs-go/</guid>
      <description>

&lt;h3 id=&#34;baidupcs-go-https-github-com-gangzhuo-baidupcs&#34;&gt;&lt;a href=&#34;https://github.com/GangZhuo/BaiduPCS&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;BaiduPCS Go&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;用于从百度云盘下载文件，不会被限速&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#登录百度帐号
BaiduPCS-Go login

#列出&amp;lt;文件或目录&amp;gt;
BaiduPCS-Go ls

#下载文件/目录
BaiduPCS-Go download &amp;lt;文件或目录&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#列出所有已登录的百度帐号
BaiduPCS-Go loglist

#获取当前帐号
BaiduPCS-Go who

#切换已登录的百度帐号
BaiduPCS-Go su &amp;lt;uid&amp;gt;

#退出当前登录的百度帐号
BaiduPCS-Go logout
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>iOS 约束布局与动画</title>
      <link>https://jepphu.github.io/2019/ios%E7%BA%A6%E6%9D%9F%E5%B8%83%E5%B1%80%E4%B8%8E%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2019/ios%E7%BA%A6%E6%9D%9F%E5%B8%83%E5%B1%80%E4%B8%8E%E5%8A%A8%E7%94%BB/</guid>
      <description>&lt;p&gt;在控件被添加了约束的情况下，修改 frame 是无法实现的动画的&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;修改约束的值&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;layoutIfNeeded&lt;/code&gt;，要注意调用时机&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;self.viewHeight.constant = 0;

[UIView animateWithDuration:0.25 animations:^{
    [self.view layoutIfNeeded];
}];
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SFSafariViewController</title>
      <link>https://jepphu.github.io/2018/sfsafariviewcontroller/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/sfsafariviewcontroller/</guid>
      <description>&lt;p&gt;不用跳出 app，直接在 app 内打开隐私协议等网址&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;SafariServices/SafariServices.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;&amp;lt;SFSafariViewControllerDelegate&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (IBAction)action:(id)sender {
    NSURL *url = [NSURL URLWithString:@&amp;quot;https://jepphu.github.io/&amp;quot;];
    SFSafariViewController *safariVC = [[SFSafariViewController alloc] initWithURL:url];
    safariVC.delegate = self;
//    self.navigationController.navigationBarHidden = YES;
//    [self.navigationController pushViewController:safariVC animated:YES];
    [self presentViewController:safariVC animated:YES completion:nil];
}

// 加载完成
- (void)safariViewController:(SFSafariViewController *)controller didCompleteInitialLoad:(BOOL)didLoadSuccessfully {

}

// 按钮 Done
- (void)safariViewControllerDidFinish:(SFSafariViewController *)controller {

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>UIView 子视图坐标转换</title>
      <link>https://jepphu.github.io/2018/uiview%E5%AD%90%E8%A7%86%E5%9B%BE%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/uiview%E5%AD%90%E8%A7%86%E5%9B%BE%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/</guid>
      <description>&lt;p&gt;ViewA, ViewB, ViewC&lt;/p&gt;

&lt;p&gt;ViewA 是 ViewB 的父视图，ViewB 是 ViewC 的父视图&lt;/p&gt;

&lt;p&gt;ViewC 此时的 frame 是相对于 ViewB 的&lt;/p&gt;

&lt;p&gt;如果需求为获取 ViewC 此时相对于 ViewA 的 frame&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (CGRect)convertRect:(CGRect)rect toView:(nullable UIView *)view;
- (CGRect)convertRect:(CGRect)rect fromView:(nullable UIView *)view;

CGRect frame = [ViewB convertRect:ViewC.frame toView:ViewA];
//或
CGRect frame = [ViewA convertRect:ViewC.frame fromView:ViewB];
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>UINavigationBar</title>
      <link>https://jepphu.github.io/2018/uinavgationbar%E5%BA%95%E9%83%A8%E7%9A%84%E7%BA%BF/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/uinavgationbar%E5%BA%95%E9%83%A8%E7%9A%84%E7%BA%BF/</guid>
      <description>

&lt;h3 id=&#34;uinavgationbar-设置颜色&#34;&gt;UINavgationBar 设置颜色&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;UINavigationController *nav = self.navigationController;
nav.navigationBar.tintColor = [UIColor whiteColor];
nav.navigationBar.barTintColor = [UIColor colorWithRed:28/255.0 green:152/255.0 blue:225/255.0 alpha:1.0];
nav.navigationBar.titleTextAttributes = @{NSForegroundColorAttributeName :[UIColor whiteColor]};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时会觉得 navigationbar 颜色很浅，因为这是半透明状态&lt;/p&gt;

&lt;p&gt;默认 &lt;code&gt;navigationbar.translucent = YES&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;改为 &lt;code&gt;navigationbar.translucent = NO&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;颜色问题解决，但是子控制器视图整体下移，加上下面这句&lt;/p&gt;

&lt;p&gt;&lt;code&gt;self.extendedLayoutIncludesOpaqueBars = YES;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者在 storyboard 中 viewController 属性勾选 Under Opaque Bars&lt;/p&gt;

&lt;p&gt;如果有特殊需求，尝试使用下面的方法&lt;/p&gt;

&lt;h3 id=&#34;透明化和显示-uinavigationbar-以及-uinavigationbar-底部的线&#34;&gt;透明化和显示 UINavigationBar 以及 UINavigationBar 底部的线&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;方法1：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (UIImageView *)navigationBarLineUnder:(UIView *)navigationBar {
    if ([navigationBar isKindOfClass:[UIImageView class]] &amp;amp;&amp;amp; navigationBar.bounds.size.height &amp;lt;= 1.0) {
        return (UIImageView *)navigationBar;
    }
    for (UIView *subview in navigationBar.subviews) {
        UIImageView *imageView= [self navigationBarLineUnder:subview];
        if (imageView) {
            return imageView;
            }
    }
    return nil;
}

//隐藏
[self navigationBarLineUnder:self.navigationController.navigationBar].hidden = YES;

//显示
[self navigationBarLineUnder:self.navigationController.navigationBar].hidden = NO;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;方法2：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//隐藏
[self.navigationController.navigationBar setBackgroundImage:[[UIImage alloc] init] forBarMetrics:UIBarMetricsDefault];
[self.navigationController.navigationBar setShadowImage:[[UIImage alloc] init]];

//显示
[self.navigationController.navigationBar setBackgroundImage:nil forBarMetrics:UIBarMetricsDefault];
[self.navigationController.navigationBar setShadowImage:nil];
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>/usr/bin 和 /usr/local/bin</title>
      <link>https://jepphu.github.io/2018/usrbin-%E5%92%8C-usrlocalbin/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/usrbin-%E5%92%8C-usrlocalbin/</guid>
      <description>&lt;p&gt;&lt;code&gt;usr&lt;/code&gt; 指 &lt;code&gt;Unix System Resource&lt;/code&gt;，而不是 User&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/bin&lt;/code&gt; 下面的都是系统预装的可执行程序，会随着系统升级而改变&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/local/bin&lt;/code&gt; 目录是给用户放置自己的可执行程序的地方，不会被系统升级而覆盖同名文件&lt;/p&gt;

&lt;p&gt;两个目录下有相同的可执行程序，谁优先执行受到 PATH 环境变量的影响&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache 服务启动和停止</title>
      <link>https://jepphu.github.io/2018/apache%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%92%8C%E5%81%9C%E6%AD%A2/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/apache%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%92%8C%E5%81%9C%E6%AD%A2/</guid>
      <description>&lt;p&gt;启动：&lt;code&gt;sudo apachectl start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;停止：&lt;code&gt;sudo apachectl stop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;重启：&lt;code&gt;sudo apachectl restart&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看 Apache 版本 &lt;code&gt;httpd -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;打开 &lt;a href=&#34;http://127.0.0.1&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;http://127.0.0.1&lt;/a&gt; 可以看到 It works! 的页面，启动成功&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>App 发送邮件</title>
      <link>https://jepphu.github.io/2018/app%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/app%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</guid>
      <description>

&lt;h3 id=&#34;ios-app-发送邮件&#34;&gt;iOS App 发送邮件&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;MessageUI/MessageUI.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;&amp;lt;MFMailComposeViewControllerDelegate&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self sendEmail:@&amp;quot;jepp.hu@mail.com&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)sendEmail:(NSString *)email {
    if ([MFMailComposeViewController canSendMail]) {
//        [self.navigationController presentViewController:[self configuredMailComposeViewControllerWithEmail:email] animated:YES completion:nil];
        [self presentViewController:[self configuredMailComposeViewControllerWithEmail:email] animated:YES completion:nil];
    } else {
        UIAlertController *sendMailErrorAlert = [UIAlertController alertControllerWithTitle:@&amp;quot;Can not send&amp;quot; message:@&amp;quot;Please set your email&amp;quot; preferredStyle:UIAlertControllerStyleAlert];
        [sendMailErrorAlert addAction:[UIAlertAction actionWithTitle:@&amp;quot;OK&amp;quot; style:UIAlertActionStyleDefault handler:nil]];
//        [self.navigationController presentViewController:sendMailErrorAlert animated:YES completion:nil];
        [self presentViewController:sendMailErrorAlert animated:YES completion:nil];
    }
}

- (MFMailComposeViewController *)configuredMailComposeViewControllerWithEmail:(NSString *)email {
    MFMailComposeViewController *mfVC = [[MFMailComposeViewController alloc] init];
    mfVC.mailComposeDelegate = self;
    // 地址
    [mfVC setToRecipients:@[email]];
    // 主题
    [mfVC setSubject:@&amp;quot;&amp;quot;];
    // 内容
    [mfVC setMessageBody:@&amp;quot;&amp;quot; isHTML:NO];
    return mfVC;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// MFMailComposeViewControllerDelegate
- (void)mailComposeController:(MFMailComposeViewController *)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError *)error {
    if (result == MFMailComposeResultFailed) {
        
    } else if (result == MFMailComposeResultSent) {
        
    }
    
    //关闭邮件发送窗口
    [controller dismissViewControllerAnimated:YES completion:nil];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;osx-app-发送邮件&#34;&gt;OSX App 发送邮件&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self sendEmail:@&amp;quot;jepp.hu@mail.com&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)sendEmail:(NSString *)email {
    NSString *recipients = [NSString stringWithFormat:@&amp;quot;mailto:%@?subject=%@&amp;quot;,eamil,@&amp;quot;subject&amp;quot;];
    NSString *body = [NSString stringWithFormat:@&amp;quot;&amp;amp;body=%@ I have something to say about %@ %@:\n&amp;quot;, @&amp;quot;body&amp;quot;, @&amp;quot;appName&amp;quot;, @&amp;quot;version&amp;quot;];
    NSString *email = [NSString stringWithFormat:@&amp;quot;%@%@&amp;quot;, recipients, body];
    email = [email stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    [[NSWorkspace sharedWorkspace] openURL:[NSURL URLWithString:email]];
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Finder 显示隐藏文件</title>
      <link>https://jepphu.github.io/2018/finder%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/finder%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;显示: &lt;code&gt;defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;隐藏: &lt;code&gt;defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homebrew</title>
      <link>https://jepphu.github.io/2018/homebrew/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/homebrew/</guid>
      <description>

&lt;h3 id=&#34;homebrew-https-brew-sh&#34;&gt;&lt;a href=&#34;https://brew.sh/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Homebrew 基于 Ruby 的，用官方给出的指令安装&lt;/p&gt;

&lt;p&gt;安装过程中需要用到苹果的 Xcode 中的编译器，需要安装 Xcode （ Perference&amp;ndash;Downloads&amp;ndash;Components&amp;ndash;Command Line Tools）&lt;/p&gt;

&lt;p&gt;安装完成后，可以用 &lt;code&gt;brew doctor&lt;/code&gt; 命令检测下是否有什么冲突的地方&lt;/p&gt;

&lt;p&gt;Homebrew 会将下载的工具安装到 &lt;code&gt;/usr/local/Cellar&lt;/code&gt; 目录中，并在 &lt;code&gt;/usr/local/bin&lt;/code&gt; 中创建链接&lt;/p&gt;

&lt;h3 id=&#34;常用命令&#34;&gt;常用命令&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;查询版本号
brew --version

更新
brew update

显示已经安装软件列表
brew list

搜索软件
brew search git

安装软件
brew install git

卸载软件
brew uninstall git
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;查看哪些已安装的程序需要更新
brew outdated

更新某个具体软件
brew upgrade git

更新全部软件，会标明已经安装并有更新版本的软件
brew upgrade

查看软件信息
brew info git

删除单个软件的旧版本
brew cleanup git 

删除所有软件的旧版本
brew cleanup

清理和删除无效 Link
brew prune
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用浏览器打开 brew 的官方网站&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew home       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;帮助文档&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew --help
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NSColorPanel</title>
      <link>https://jepphu.github.io/2018/nscolorpanel/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/nscolorpanel/</guid>
      <description>&lt;p&gt;设置 NSColorPanel 的显示模式和初始默认色盘，要在实例化之前设置&lt;/p&gt;

&lt;p&gt;不自定义设置时会默认为以下设置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[NSColorPanel setPickerMask:NSColorPanelAllModesMask];
[NSColorPanel setPickerMode:NSColorPanelModeNone];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实例对象是一个单例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSColorPanel *panel = [NSColorPanel sharedColorPanel];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示与隐藏&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;if ([panel isVisible]) {
    [panel orderOut:self];
} else {
    [panel orderFront:self];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置选取颜色后的响应事件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[panel setTarget:self];
[panel setAction:@selector(colorSelectedAction:)];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从 View 中拖拽颜色到颜色面板&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)mouseDragged:(NSEvent *)event {
    [NSColorPanel dragColor:[NSColor orangeColor] withEvent:event fromView:self];
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NSView 监听鼠标悬停</title>
      <link>https://jepphu.github.io/2018/nsview%E7%9B%91%E5%90%AC%E9%BC%A0%E6%A0%87%E6%82%AC%E5%81%9C/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/nsview%E7%9B%91%E5%90%AC%E9%BC%A0%E6%A0%87%E6%82%AC%E5%81%9C/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface HoverImageButton ()

@property (strong,nonatomic) NSTrackingArea *trackingArea;
@property (strong,nonatomic) NSImage *tempImage;
@property (strong,nonatomic) NSImage *alternateImage;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@implementation HoverImageButton

- (instancetype)initWithCoder:(NSCoder *)coder {
    self = [super initWithCoder:coder];
    if (self) {
        self.tempImage = self.image;
    }
    return self;
}

- (void)updateTrackingAreas {
    if (self.trackingArea) {
        [self removeTrackingArea:self.trackingArea];
    }
    int opts = (NSTrackingActiveAlways | NSTrackingMouseEnteredAndExited);
    self.trackingArea = [[NSTrackingArea alloc] initWithRect:self.bounds options:opts owner:self userInfo:nil];
    [self addTrackingArea:self.trackingArea];
}

- (void)mouseEntered:(NSEvent *)event {
    [super mouseEntered:event];
    self.image = self.alternateImage;
}

- (void)mouseExited:(NSEvent *)event {
    [super mouseExited:event];
    self.image = self.tempImage;
}

@end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NSWindow 常用属性</title>
      <link>https://jepphu.github.io/2018/nswindow%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/nswindow%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/</guid>
      <description>&lt;p&gt;隐藏标题栏&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self setTitleVisibility:NSWindowTitleHidden];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;window StyleMask 设置为 NSFullSizeContentViewWindowMask 时，标题栏不绘制背景&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self setTitlebarAppearsTransparent:YES];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过拖动背景来移动整个 window&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self setMovableByWindowBackground:YES];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完全透明的 window&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self setBackgroundColor:[NSColor clearColor]];
[self setOpaque:NO];
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>