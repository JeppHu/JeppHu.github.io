<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jepp Hu on Jepp Hu</title>
    <link>https://jepphu.github.io/</link>
    <description>Recent content in Jepp Hu on Jepp Hu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Feb 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>git 配置多账户</title>
      <link>https://jepphu.github.io/2019/git%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B4%A6%E6%88%B7/</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2019/git%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B4%A6%E6%88%B7/</guid>
      <description>

&lt;h3 id=&#34;1-为不同的账号生成对应的-key&#34;&gt;1. 为不同的账号生成对应的 key&lt;/h3&gt;

&lt;p&gt;检查是否有 .ssh 目录&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;cd ~/.ssh
#如果目录不存在，执行
ssh-keygen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成 github 和 bitbucket 的 key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;cd ~/.ssh
ssh-keygen -t rsa -C &amp;quot;youremail@domain.com&amp;quot;
#执行命令后的第一次输入，输入一个用于区分的自定义名字,不要有空格，如：my_github_rsa，回车
第二次与第三次的输入是为了设定访问 key 的密码，可以直接回车跳过

ssh-keygen -t rsa -C &amp;quot;youremail@domain.com&amp;quot;
#同上自定义名字，如：my_bitbucket_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时在 .ssh 目录下至少会有以下5个文件，.pub 后缀的为公钥，另一个为秘钥&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;config           
my_bitbucket_rsa        my_github_rsa
my_bitbucket_rsa.pub    my_github_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-修改配置文件&#34;&gt;2. 修改配置文件&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;#进入 .ssh 目录，如果目录下没有 config 文件，那么创建
cd ~/.ssh
touch config

#添加以下内容
Host github.com
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/my_github_rsa
Host bitbucket.org
    HostName bitbucket.org
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/my_bitbucket_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Host 字段只是别名，可以任意取，HostName 字段是真实的主机名&lt;/p&gt;

&lt;p&gt;如果 Host 字段任意取名，那么在进行 clone 等操作时要将 URL Host 替换&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;#原本 
git clone git@github.com:xxx/xxx.git
#替换
git clone git@YourHost:xxx/xxx.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-向-github-和-bitbucket-添加秘钥&#34;&gt;3. 向 github 和 bitbucket 添加秘钥&lt;/h3&gt;

&lt;p&gt;将公钥添加在 github 或者 bitbucket 后台中，
以 github 为例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;github 首页右上角头像下拉框 &amp;ndash;&amp;gt; settings &amp;ndash;&amp;gt; SSH and GPG keys&lt;/li&gt;
&lt;li&gt;title 部分，用于区分设备的名称&lt;/li&gt;
&lt;li&gt;key 部分，复制 my_github_rsa.pub 中的内容&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;4-测试&#34;&gt;4. 测试&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;ssh -T git@github.com
#输出 Hi XXX! You&#39;ve successfully authenticated, but GitHub does not provide shell access.

ssh -T git@bitbucket.org
#输出 You can use git or hg to connect to Bitbucket. Shell access is disabled

#测试过程中出现 The authenticity of host &#39;github.com (192.xxx.xxx.xxx)&#39; can&#39;t be established.
RSA key fingerprint is SHA256:...   
输入 yes，回车
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果 Host 字段任意取名为 YourHost，测试&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;ssh -T git@YourHost 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>/usr/bin 和 /usr/local/bin</title>
      <link>https://jepphu.github.io/2018/usrbin-%E5%92%8C-usrlocalbin/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/usrbin-%E5%92%8C-usrlocalbin/</guid>
      <description>&lt;p&gt;&lt;code&gt;usr&lt;/code&gt; 指 &lt;code&gt;Unix System Resource&lt;/code&gt;，而不是 User&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/bin&lt;/code&gt; 下面的都是系统预装的可执行程序，会随着系统升级而改变&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/local/bin&lt;/code&gt; 目录是给用户放置自己的可执行程序的地方，不会被系统升级而覆盖同名文件&lt;/p&gt;

&lt;p&gt;两个目录下有相同的可执行程序，谁优先执行受到 PATH 环境变量的影响&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache 服务启动和停止</title>
      <link>https://jepphu.github.io/2018/apache%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%92%8C%E5%81%9C%E6%AD%A2/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/apache%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%92%8C%E5%81%9C%E6%AD%A2/</guid>
      <description>&lt;p&gt;启动：&lt;code&gt;sudo apachectl start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;停止：&lt;code&gt;sudo apachectl stop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;重启：&lt;code&gt;sudo apachectl restart&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看 Apache 版本 &lt;code&gt;httpd -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;打开 &lt;a href=&#34;http://127.0.0.1&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;http://127.0.0.1&lt;/a&gt; 可以看到 It works! 的页面，启动成功&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finder 显示隐藏文件</title>
      <link>https://jepphu.github.io/2018/finder%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/finder%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;显示: &lt;code&gt;defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;隐藏: &lt;code&gt;defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homebrew</title>
      <link>https://jepphu.github.io/2018/homebrew/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/homebrew/</guid>
      <description>

&lt;h3 id=&#34;homebrew-https-brew-sh&#34;&gt;&lt;a href=&#34;https://brew.sh/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Homebrew 基于 Ruby 的，用官方给出的指令安装&lt;/p&gt;

&lt;p&gt;安装过程中需要用到苹果的 Xcode 中的编译器，需要安装 Xcode （ Perference&amp;ndash;Downloads&amp;ndash;Components&amp;ndash;Command Line Tools）&lt;/p&gt;

&lt;p&gt;安装完成后，可以用 &lt;code&gt;brew doctor&lt;/code&gt; 命令检测下是否有什么冲突的地方&lt;/p&gt;

&lt;p&gt;Homebrew 会将下载的工具安装到 &lt;code&gt;/usr/local/Cellar&lt;/code&gt; 目录中，并在 &lt;code&gt;/usr/local/bin&lt;/code&gt; 中创建链接&lt;/p&gt;

&lt;h3 id=&#34;常用命令&#34;&gt;常用命令&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;查询版本号
brew --version

更新
brew update

显示已经安装软件列表
brew list

搜索软件
brew search git

安装软件
brew install git

卸载软件
brew uninstall git
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;查看哪些已安装的程序需要更新
brew outdated

更新某个具体软件
brew upgrade git

更新全部软件，会标明已经安装并有更新版本的软件
brew upgrade

查看软件信息
brew info git

删除单个软件的旧版本
brew cleanup git 

删除所有软件的旧版本
brew cleanup

清理和删除无效 Link
brew prune
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用浏览器打开 brew 的官方网站&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew home       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;帮助文档&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew --help
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NSColorPanel</title>
      <link>https://jepphu.github.io/2018/nscolorpanel/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/nscolorpanel/</guid>
      <description>&lt;p&gt;设置 NSColorPanel 的显示模式和初始默认色盘，要在实例化之前设置&lt;/p&gt;

&lt;p&gt;不自定义设置时会默认为以下设置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[NSColorPanel setPickerMask:NSColorPanelAllModesMask];
[NSColorPanel setPickerMode:NSColorPanelModeNone];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实例对象是一个单例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSColorPanel *panel = [NSColorPanel sharedColorPanel];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示与隐藏&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;if ([panel isVisible]) {
    [panel orderOut:self];
} else {
    [panel orderFront:self];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置选取颜色后的响应事件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[panel setTarget:self];
[panel setAction:@selector(colorSelectedAction:)];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从 View 中拖拽颜色到颜色面板&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)mouseDragged:(NSEvent *)event {
    [NSColorPanel dragColor:[NSColor orangeColor] withEvent:event fromView:self];
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NSView 监听鼠标悬停</title>
      <link>https://jepphu.github.io/2018/nsview%E7%9B%91%E5%90%AC%E9%BC%A0%E6%A0%87%E6%82%AC%E5%81%9C/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/nsview%E7%9B%91%E5%90%AC%E9%BC%A0%E6%A0%87%E6%82%AC%E5%81%9C/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@interface HoverImageButton ()

@property (strong,nonatomic) NSTrackingArea *trackingArea;
@property (strong,nonatomic) NSImage *tempImage;
@property (strong,nonatomic) NSImage *alternateImage;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@implementation HoverImageButton

- (instancetype)initWithCoder:(NSCoder *)coder {
    self = [super initWithCoder:coder];
    if (self) {
        self.tempImage = self.image;
    }
    return self;
}

- (void)updateTrackingAreas {
    if (self.trackingArea) {
        [self removeTrackingArea:self.trackingArea];
    }
    int opts = (NSTrackingActiveAlways | NSTrackingMouseEnteredAndExited);
    self.trackingArea = [[NSTrackingArea alloc] initWithRect:self.bounds options:opts owner:self userInfo:nil];
    [self addTrackingArea:self.trackingArea];
}

- (void)mouseEntered:(NSEvent *)event {
    [super mouseEntered:event];
    self.image = self.alternateImage;
}

- (void)mouseExited:(NSEvent *)event {
    [super mouseExited:event];
    self.image = self.tempImage;
}

@end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NSWindow 常用属性</title>
      <link>https://jepphu.github.io/2018/nswindow%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/nswindow%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/</guid>
      <description>&lt;p&gt;隐藏标题栏&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self setTitleVisibility:NSWindowTitleHidden];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;window StyleMask 设置为 NSFullSizeContentViewWindowMask 时，标题栏不绘制背景&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self setTitlebarAppearsTransparent:YES];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过拖动背景来移动整个 window&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self setMovableByWindowBackground:YES];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完全透明的 window&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[self setBackgroundColor:[NSColor clearColor]];
[self setOpaque:NO];
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NSWindow 改变 WindowButton 位置</title>
      <link>https://jepphu.github.io/2018/nswindow%E6%94%B9%E5%8F%98windowbutton%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/nswindow%E6%94%B9%E5%8F%98windowbutton%E4%BD%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;NSWindow 上的三个按钮&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSButton *closeBtn = [self standardWindowButton:NSWindowCloseButton];
NSButton *miniaturizeBtn = [self standardWindowButton:NSWindowMiniaturizeButton];
NSButton *zoomBtn = [self standardWindowButton:NSWindowZoomButton];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;系统创建的默认 frame 分别为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;(7.000000,3.000000),(14.000000,16.000000)
(27.000000,3.000000),(14.000000,16.000000)
(47.000000,3.000000),(14.000000,16.000000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;button 创建时是自动布局，直接修改 frame 无效&lt;/p&gt;

&lt;p&gt;关闭自动布局，添加约束布局就能修改 window button 的位置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;closeBtn.translatesAutoresizingMaskIntoConstraints = NO;
miniaturizeBtn.translatesAutoresizingMaskIntoConstraints = NO;
zoomBtn.translatesAutoresizingMaskIntoConstraints = NO;

NSLayoutConstraint *leftContraint1 = [NSLayoutConstraint constraintWithItem:closeBtn attribute:NSLayoutAttributeLeft relatedBy:NSLayoutRelationEqual toItem:closeBtn.superview attribute:NSLayoutAttributeLeft multiplier:1.0 constant:4.0];
NSLayoutConstraint *topContraint1 = [NSLayoutConstraint constraintWithItem:closeBtn attribute:NSLayoutAttributeTop relatedBy:NSLayoutRelationEqual toItem:closeBtn.superview attribute:NSLayoutAttributeTop multiplier:1.0 constant:3.0];
leftContraint1.active = YES;
topContraint1.active = YES;

NSLayoutConstraint *leftContraint2 = [NSLayoutConstraint constraintWithItem:miniaturizeBtn attribute:NSLayoutAttributeLeft relatedBy:NSLayoutRelationEqual toItem:miniaturizeBtn.superview attribute:NSLayoutAttributeLeft multiplier:1.0 constant:23.0];
NSLayoutConstraint *topContraint2 = [NSLayoutConstraint constraintWithItem:miniaturizeBtn attribute:NSLayoutAttributeTop relatedBy:NSLayoutRelationEqual toItem:miniaturizeBtn.superview attribute:NSLayoutAttributeTop multiplier:1.0 constant:3.0];
leftContraint2.active = YES;
topContraint2.active = YES;

NSLayoutConstraint *leftContraint3 = [NSLayoutConstraint constraintWithItem:zoomBtn attribute:NSLayoutAttributeLeft relatedBy:NSLayoutRelationEqual toItem:zoomBtn.superview attribute:NSLayoutAttributeLeft multiplier:1.0 constant:43.0];
NSLayoutConstraint *topContraint3 = [NSLayoutConstraint constraintWithItem:zoomBtn attribute:NSLayoutAttributeTop relatedBy:NSLayoutRelationEqual toItem:zoomBtn.superview attribute:NSLayoutAttributeTop multiplier:1.0 constant:3.0];
leftContraint3.active = YES;
topContraint3.active = YES;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>RVM</title>
      <link>https://jepphu.github.io/2018/rvm/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/rvm/</guid>
      <description>

&lt;h3 id=&#34;rvm-http-www-rvm-io-ruby-version-manager&#34;&gt;&lt;a href=&#34;http://www.rvm.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;RVM&lt;/a&gt; : Ruby Version Manager&lt;/h3&gt;

&lt;p&gt;Ruby 是一种开源的面向对象程序设计的服务器端脚本语言&lt;/p&gt;

&lt;p&gt;Mac OS X 是默认安装了 Ruby ，但版本唯一且较低，并不能满足一般的开发需求&lt;/p&gt;

&lt;p&gt;RVM 是一个终端工具，提供便捷的多版本 Ruby 环境的管理和切换功能&lt;/p&gt;

&lt;h3 id=&#34;常用命令&#34;&gt;常用命令&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;版本查询
rvm --version

RVM 更新
rvm get stable

显示已安装的 Ruby 版本
rvm list

列出可获得的 Ruby 版本
rvm list known

选择安装一个 Ruby 版本
rvm install 2.2.0

切换一个 Ruby 版本
rvm use 2.2.0

卸载一个已安装版本
rvm remove 1.8.7

设置一个 Ruby 版本为默认版本
rvm use 2.2.0 --default

查询详细信息
rvm info
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>UINavigationBar 底部的线</title>
      <link>https://jepphu.github.io/2018/uinavgationbar%E5%BA%95%E9%83%A8%E7%9A%84%E7%BA%BF/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/uinavgationbar%E5%BA%95%E9%83%A8%E7%9A%84%E7%BA%BF/</guid>
      <description>

&lt;h3 id=&#34;隐藏和显示-uinavigationbar-底部的线&#34;&gt;隐藏和显示 UINavigationBar 底部的线&lt;/h3&gt;

&lt;p&gt;方法1：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (UIImageView *)navigationBarLineUnder:(UIView *)navigationBar {
    if ([navigationBar isKindOfClass:[UIImageView class]] &amp;amp;&amp;amp; navigationBar.bounds.size.height &amp;lt;= 1.0) {
        return (UIImageView *)navigationBar;
    }
    for (UIView *subview in navigationBar.subviews) {
        UIImageView *imageView= [self navigationBarLineUnder:subview];
        if (imageView) {
            return imageView;
            }
    }
    return nil;
}

//隐藏
[self navigationBarLineUnder:self.navigationController.navigationBar].hidden = YES;

//显示
[self navigationBarLineUnder:self.navigationController.navigationBar].hidden = NO;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法2：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//隐藏
[self.navigationController.navigationBar setBackgroundImage:[[UIImage alloc] init] forBarMetrics:UIBarMetricsDefault];
[self.navigationController.navigationBar setShadowImage:[[UIImage alloc] init]];

//显示
[self.navigationController.navigationBar setBackgroundImage:nil forBarMetrics:UIBarMetricsDefault];
[self.navigationController.navigationBar setShadowImage:nil];
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>UIView 事件穿透</title>
      <link>https://jepphu.github.io/2018/uiview%E4%BA%8B%E4%BB%B6%E7%A9%BF%E9%80%8F/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/uiview%E4%BA%8B%E4%BB%B6%E7%A9%BF%E9%80%8F/</guid>
      <description>&lt;p&gt;实现最顶层的 UIView 的 hitTest 方法，返回下层的某个 view 实例，即相当于把那个按钮的事件透出来了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event {
    UIView *hitView = [super hitTest:point withEvent:event];
    if(hitView == self){
        return nil;
    }
    return hitView;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>WKWebView 与 WebView 调试器</title>
      <link>https://jepphu.github.io/2018/wkwebview%E4%B8%8Ewebview%E8%B0%83%E8%AF%95%E5%99%A8/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/wkwebview%E4%B8%8Ewebview%E8%B0%83%E8%AF%95%E5%99%A8/</guid>
      <description>

&lt;h3 id=&#34;wkwebview&#34;&gt;WKWebView&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#ifdef DEBUG
    [self.webView.configuration.preferences setValue:@YES forKey:@&amp;quot;developerExtrasEnabled&amp;quot;];
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;webview&#34;&gt;WebView&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;#terminal 
defaults write com.yourcompany.yourbundleid WebKitDeveloperExtras TRUE
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>WKWebView 清除 cookies</title>
      <link>https://jepphu.github.io/2018/wkwebview%E6%B8%85%E9%99%A4cookies/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/wkwebview%E6%B8%85%E9%99%A4cookies/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSSet *websiteDataTypes = [WKWebsiteDataStore allWebsiteDataTypes];

NSDate *dateFrom = [NSDate dateWithTimeIntervalSince1970:0];

[[WKWebsiteDataStore defaultDataStore] removeDataOfTypes:websiteDataTypes modifiedSince:dateFrom completionHandler:^{}];
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>WKWebView 页面显示不全</title>
      <link>https://jepphu.github.io/2018/wkwebview%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%85%A8/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jepphu.github.io/2018/wkwebview%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%85%A8/</guid>
      <description>

&lt;h3 id=&#34;wkwebview-因为-nswindow-属性造成的-bug&#34;&gt;WKWebView 因为 NSWindow 属性造成的 bug&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSWindowStyleMask  ==  NSWindowStyleMaskFullSizeContentView
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时 WKWebView 如果不是充满整个 Window 加载的 HTML 会出现页面显示不全的情况&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSWindowStyleMask  ==  NSWindowStyleMaskBorderless
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>